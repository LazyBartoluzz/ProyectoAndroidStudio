import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController

@Composable
fun AgregarPlato(navController: NavController,platosViewModel :PlatosViewModel) {
    // Colores personalizados
    val naranjaClaro = Color(0xFFFFA726)
    val azulCielo = Color(0xFF81D4FA)

    // Estados para los TextFields
    var descripcion by remember { mutableStateOf("") }
    var precio by remember { mutableStateOf("") }
    var urlImagen by remember { mutableStateOf("") } 

    Surface(
        modifier = Modifier.fillMaxSize(),
        color = azulCielo
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(24.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = "Agregar Plato",
                style = MaterialTheme.typography.headlineSmall,
                color = Color.White
            )

            // Campos de texto
            OutlinedTextField(
                value = descripcion,
                onValueChange = { descripcion = it },
                label = { Text("Descripción") },
                modifier = Modifier.fillMaxWidth()
            )

            OutlinedTextField(
                value = precio,
                onValueChange = { precio = it },
                label = { Text("Precio (en decimal)") },
                modifier = Modifier.fillMaxWidth()
            )
            
              OutlinedTextField(
                value = urlImagen,
                onValueChange = { urlImagen = it },
                label = { Text("URL - imágen") },
                modifier = Modifier.fillMaxWidth()
            )
            
            val contextoParaToast = LocalContext.current.applicationContext
            
            // Botón Agregar
            Button(
                onClick = {
                 
                    if( validar( descripcion,urlImagen, precio) ){
                    
                    	platosViewModel.createPlato( Plato( null,descripcion,precio, urlImagen) )
                    	Toast.makeText( contextoParaToast, "Se ha creado un nuevo plato ${ descripcion }!", Toast.LENGTH_SHORT ).show()
                		
                    }else{
                    	
                    	Toast.makeText( contextoParaToast, "Tenga cuidado con los tipos de datos!", Toast.LENGTH_LONG ).show()
                		
                    }	
                },
                colors = ButtonDefaults.buttonColors(containerColor = naranjaClaro),
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Agregar", color = Color.White)
            }
            
            Button(
                onClick = { navController.popBackStack() },
                colors = ButtonDefaults.buttonColors(containerColor = naranjaClaro),
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Volver", color = Color.White)
            }
            
            //va al main
             Button(
                onClick = { navController.navigate("ScreenA") },
                colors = ButtonDefaults.buttonColors(containerColor = naranjaClaro),
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Ir al inicio", color = Color.White)
            }
            
        }
    }
}

fun validar(cadena1: String, cadena2: String, numero: String): Boolean {
    return if (cadena1.isNotEmpty() && cadena2.isNotEmpty()) {
        try {
            val numeroDouble = numero.toDouble()  // Intentamos convertir el string a Double
            true  // Si la conversión tiene éxito, devolvemos true
        } catch (e: NumberFormatException) {
            false  // Si la conversión falla (excepción), devolvemos false
        }
    } else {
        false  // Si alguna de las cadenas está vacía, devolvemos false
    }
}
